Crear un nuevo repositorio desde la l√≠nea de comandos

echo "# DV_06_REACT+SUPABASE" >> README.md   # Crea un archivo README.md con el t√≠tulo del proyecto
git init                                     # Inicializa un repositorio Git en esta carpeta
git add README.md                            # A√±ade el archivo README al repositorio
git commit -m "first commit"                 # Crea el primer commit con mensaje
git branch -M main                           # Crea (o renombra) la rama principal como "main"
git remote add origin https://github.com/jvegaAD/DV_06_REACT-SUPABASE.git  # Enlaza tu repositorio local con GitHub
git push -u origin main                      # Sube tu proyecto a GitHub en la rama "main"



O subir un repositorio existente a GitHub

git remote add origin https://github.com/jvegaAD/DV_06_REACT-SUPABASE.git  # Enlaza con el repo remoto
git branch -M main                           # Asegura que est√©s en la rama "main"
git push -u origin main                      # Sube el proyecto al repo remoto





-------------o0--------------------------------
Paso a paso en la terminal integrada de VS Code:

git init
# üß± Inicializa un nuevo repositorio Git en la carpeta actual del proyecto

git add .
# üì¶ Agrega todos los archivos y carpetas al √°rea de preparaci√≥n (staging)

git commit -m "üî∞ Proyecto React + Supabase finalizado"
# ‚úÖ Crea un commit con los archivos preparados, y un mensaje descriptivo

git branch -M main
# üåø Renombra (o crea) la rama principal como "main" (en lugar de "master")

git remote add origin https://github.com/jvegaAD/DV_06_REACT-SUPABASE.git
# üîó Asocia tu repositorio local a un repositorio remoto en GitHub (llamado "origin")

git push -u origin main
# üöÄ Sube tus commits locales a la rama "main" del repositorio remoto y deja rastreo para futuros push/pull



-------------o0--------------------------------
Diferencia de los comandos, al subir por segunda vez un archivo.

git init
# ‚ö†Ô∏è No es necesario si ya inicializaste el repositorio antes.
# Si lo ejecutas otra vez, no pasar√° nada grave si ya existe el repositorio local, pero puede mostrar advertencias.

git add .
# ‚úÖ Vuelve a agregar TODOS los archivos al √°rea de staging.
# Esto incluye archivos modificados, nuevos o no rastreados (pero no borra ninguno).
# √ötil para preparar todos los cambios antes de hacer un commit.

git commit -m "mensaje"
# ‚úÖ Crea un nuevo commit con los archivos a√±adidos.
# Si no hubo cambios desde el √∫ltimo commit, Git dir√°: "nothing to commit".

git branch -M main
# ‚úÖ Renombra la rama actual a "main".
# Si ya est√°s en la rama "main", no hace nada (es seguro repetirlo).

git remote add origin https://github.com/tu_usuario/repositorio.git
# ‚ö†Ô∏è SOLO se debe ejecutar una vez.
# Si lo ejecutas otra vez, Git dir√°:  
# "fatal: remote origin already exists"
# Soluci√≥n en ese caso: usar `git remote set-url origin <nueva_url>` para cambiar el remoto.

git push -u origin main
# ‚úÖ Sube los commits locales a GitHub.
# Si ya est√° conectado y autenticado, solo se sincronizan los nuevos commits.
# El `-u` guarda esta relaci√≥n, por lo que en el futuro puedes solo escribir `git push`.










-------------o0--------------------------------
subir un nuevo archivo a GitHub:


git add README.md  # üöÄ Archivo con la descripci√≥n del proyecto

git commit -m "üìù Agregar documentaci√≥n inicial del proyecto"
git push


-------------o0--------------------------------
Explicaci√≥n del codigo:

git add README.md
# üöÄ Prepara √∫nicamente el archivo README.md para el pr√≥ximo commit.
# √ötil si solo hiciste cambios en la documentaci√≥n y no quieres incluir otros archivos a√∫n.

git commit -m "üìù Agregar documentaci√≥n inicial del proyecto"
# üìù Crea un commit con un mensaje claro que documenta el prop√≥sito del cambio: en este caso, a√±adir el README.

git push
# ‚¨ÜÔ∏è Sube ese commit al repositorio remoto (GitHub) en la rama actual (probablemente "main").






